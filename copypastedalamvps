const express = require('express');
const { exec } = require('child_process');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = 80; // Change to port 80
const streams = {}; // Store stream information

app.use(express.urlencoded({ extended: true }));

// Serve static files
app.use('/streams', express.static('streams'));

// Render the index page
app.get('/', (req, res) => {
    res.send(`
        <h1>YouTube Streamer</h1>
        <form action="/add-stream" method="POST">
            <input type="text" name="videoId" placeholder="YouTube Video ID" required>
            <button type="submit">Add Stream</button>
        </form>
        <h2>Active Streams</h2>
        <ul>
            ${Object.keys(streams).map(stream => `
                <li>
                    ${stream}
                    <button onclick="removeStream('${stream}')">Remove</button>
                    <br>
                    <a href="http://${req.headers.host}/streams/${stream}/stream.m3u8">M3U8 Link</a>
                </li>
            `).join('')}
        </ul>
        <script>
            function removeStream(name) {
                fetch('/remove-stream', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name })
                }).then(() => location.reload());
            }
        </script>
    `);
});

// Add a new stream
app.post('/add-stream', (req, res) => {
    const videoId = req.body.videoId;
    const streamName = `stream_${videoId}`; // Create a unique stream name
    const m3u8File = path.join(__dirname, 'streams', `${streamName}`, 'stream.m3u8');

    if (!fs.existsSync(path.join(__dirname, 'streams', streamName))) {
        fs.mkdirSync(path.join(__dirname, 'streams', streamName), { recursive: true });
    }

    const ffmpegProcess = exec(`yt-dlp --cookies cookies.txt -f b -g "https://www.youtube.com/watch?v=${videoId}"`, (error, stdout, stderr) => {
        if (error) {
            console.error(`Error fetching stream URL: ${error.message}`);
            return res.status(500).send('Error fetching stream URL.');
        }
        const streamUrl = stdout.trim();
        if (!streamUrl) {
            console.error('Stream URL is empty.');
            return res.status(500).send('Error: Stream URL is empty.');
        }

        const ffmpegCommand = `ffmpeg -re -i "${streamUrl}" -c:v copy -c:a copy -f hls -hls_time 10 -hls_list_size 0 -hls_flags delete_segments "${m3u8File}"`;

        const ffmpegProcess = exec(ffmpegCommand, (error) => {
            if (error) {
                console.error(`FFmpeg error: ${error.message}`);
            } else {
                console.log(`Streaming started for ${streamName}`);
            }
        });

        streams[streamName] = ffmpegProcess; // Store the process
        res.redirect('/');
    });
});

// Remove a stream
app.post('/remove-stream', (req, res) => {
    const streamName = req.body.name;
    const streamPath = path.join(__dirname, 'streams', streamName);

    if (streams[streamName]) {
        streams[streamName].kill(); // Kill the ffmpeg process
        delete streams[streamName]; // Remove from active streams
    }

    if (fs.existsSync(streamPath)) {
        fs.rmdirSync(streamPath, { recursive: true }); // Remove stream directory
    }
    res.sendStatus(200);
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
